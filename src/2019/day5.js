const util = require('./utils');


// input is 1,12,2,3,1,1,2,3,1,3,4,3,1,5,0,3,2,1,6,19,1,19,6,23,2,23,6,27,2,6,27,31,2,13,31,35,1,9,35,39,2,10,39,43,1,6,43,47,1,13,47,51,2,6,51,55,2,55,6,59,1,59,5,63,2,9,63,67,1,5,67,71,2,10,71,75,1,6,75,79,1,79,5,83,2,83,10,87,1,9,87,91,1,5,91,95,1,95,6,99,2,10,99,103,1,5,103,107,1,107,6,111,1,5,111,115,2,115,6,119,1,119,6,123,1,123,10,127,1,127,13,131,1,131,2,135,1,135,5,0,99,2,14,0,0

// brute force approach 
/*
for each of the position in (1), loop over 0 to 99 positions for (2)

19690720

196907*100 + 20
19690*100 + 720
1969*100 + 19493820
196*100 + 19671120

*/

getProgramState();
function getProgramState() {
    // const input = util.readFile('day2.txt');
    const input = ["3,225,1,225,6,6,1100,1,238,225,104,0,1101,37,61,225,101,34,121,224,1001,224,-49,224,4,224,102,8,223,223,1001,224,6,224,1,224,223,223,1101,67,29,225,1,14,65,224,101,-124,224,224,4,224,1002,223,8,223,101,5,224,224,1,224,223,223,1102,63,20,225,1102,27,15,225,1102,18,79,224,101,-1422,224,224,4,224,102,8,223,223,1001,224,1,224,1,223,224,223,1102,20,44,225,1001,69,5,224,101,-32,224,224,4,224,1002,223,8,223,101,1,224,224,1,223,224,223,1102,15,10,225,1101,6,70,225,102,86,40,224,101,-2494,224,224,4,224,1002,223,8,223,101,6,224,224,1,223,224,223,1102,25,15,225,1101,40,67,224,1001,224,-107,224,4,224,102,8,223,223,101,1,224,224,1,223,224,223,2,126,95,224,101,-1400,224,224,4,224,1002,223,8,223,1001,224,3,224,1,223,224,223,1002,151,84,224,101,-2100,224,224,4,224,102,8,223,223,101,6,224,224,1,224,223,223,4,223,99,0,0,0,677,0,0,0,0,0,0,0,0,0,0,0,1105,0,99999,1105,227,247,1105,1,99999,1005,227,99999,1005,0,256,1105,1,99999,1106,227,99999,1106,0,265,1105,1,99999,1006,0,99999,1006,227,274,1105,1,99999,1105,1,280,1105,1,99999,1,225,225,225,1101,294,0,0,105,1,0,1105,1,99999,1106,0,300,1105,1,99999,1,225,225,225,1101,314,0,0,106,0,0,1105,1,99999,108,677,677,224,1002,223,2,223,1006,224,329,101,1,223,223,1107,677,226,224,102,2,223,223,1006,224,344,101,1,223,223,8,677,677,224,1002,223,2,223,1006,224,359,101,1,223,223,1008,677,677,224,1002,223,2,223,1006,224,374,101,1,223,223,7,226,677,224,1002,223,2,223,1006,224,389,1001,223,1,223,1007,677,677,224,1002,223,2,223,1006,224,404,1001,223,1,223,7,677,677,224,1002,223,2,223,1006,224,419,1001,223,1,223,1008,677,226,224,1002,223,2,223,1005,224,434,1001,223,1,223,1107,226,677,224,102,2,223,223,1005,224,449,1001,223,1,223,1008,226,226,224,1002,223,2,223,1006,224,464,1001,223,1,223,1108,677,677,224,102,2,223,223,1006,224,479,101,1,223,223,1108,226,677,224,1002,223,2,223,1006,224,494,1001,223,1,223,107,226,226,224,1002,223,2,223,1006,224,509,1001,223,1,223,8,226,677,224,102,2,223,223,1006,224,524,1001,223,1,223,1007,226,226,224,1002,223,2,223,1006,224,539,1001,223,1,223,107,677,677,224,1002,223,2,223,1006,224,554,1001,223,1,223,1107,226,226,224,102,2,223,223,1005,224,569,101,1,223,223,1108,677,226,224,1002,223,2,223,1006,224,584,1001,223,1,223,1007,677,226,224,1002,223,2,223,1005,224,599,101,1,223,223,107,226,677,224,102,2,223,223,1005,224,614,1001,223,1,223,108,226,226,224,1002,223,2,223,1005,224,629,101,1,223,223,7,677,226,224,102,2,223,223,1005,224,644,101,1,223,223,8,677,226,224,102,2,223,223,1006,224,659,1001,223,1,223,108,677,226,224,102,2,223,223,1005,224,674,1001,223,1,223,4,223,99,226"];
    // let input_array = input[0].split(",");
    input_array = [1102, 34915192, 34915192, 7, 4, 7, 99, 0];
    // input_array = [104, 1125899906842624, 99];
    input_array = input_array.map((x) => {
        return parseInt(x, 10);
    });

    input_array = computeResult(input_array, 5);

    console.log(JSON.stringify(input_array));
    return input_array[0];
}

function computeResult(input_array, specialInput) {
    let first_param_value, second_param_value;
    for (let i = 0; i < input_array.length;) {
        // get the first string
        let num = input_array[i];
        const first_operation = num % 100;
        num = Math.floor(num / 100);
        const first_parameter_mode = num === 0 ? 0 : num % 10;
        num = Math.floor(num / 10);
        const second_parameter_mode = num === 0 ? 0 : num % 10;
        const third_paramter_mode = 0; //always going to be relative
        let operation = first_operation;
        first_param_value = first_parameter_mode == 0 ? input_array[input_array[i + 1]] : input_array[i + 1];
        second_param_value = second_parameter_mode == 0 ? input_array[input_array[i + 2]] : input_array[i + 2];
        switch (operation) {
            case 1:
                input_array[input_array[i + 3]] = first_param_value + second_param_value;
                i = i + 4;
                break;
            case 2:
                input_array[input_array[i + 3]] = first_param_value * second_param_value;
                i = i + 4
                break;
            case 3:
                // input
                input_array[input_array[i + 1]] = specialInput;
                i = i + 2;
                break;
            case 4:
                // output
                console.log(first_param_value);
                i = i + 2;
                break;
            case 5:
                if (first_param_value !== 0) {
                    i = second_param_value;
                } else {
                    i = i + 3;
                }
                break;
            case 6:
                if (first_param_value === 0) {
                    i = second_param_value;
                } else {
                    i = i + 3;
                }
                break;
            case 7:
                if (first_param_value < second_param_value) {
                    input_array[input_array[i + 3]] = 1;
                } else {
                    input_array[input_array[i + 3]] = 0;
                }
                i = i + 4;
                break;
            case 8:
                if (first_param_value === second_param_value) {
                    input_array[input_array[i + 3]] = 1;
                } else {
                    input_array[input_array[i + 3]] = 0;
                }
                i = i + 4;
                break;
            case 99:
                i = i + 1;
                throw new Error('halt');
                break;
            default:
                throw new Error('invalid operation');
                break;

        }
    }
    return input_array;
}

module.exports = { get1202ProgramState }