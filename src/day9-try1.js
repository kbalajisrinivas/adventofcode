const util = require('./utils');


// input is 1,12,2,3,1,1,2,3,1,3,4,3,1,5,0,3,2,1,6,19,1,19,6,23,2,23,6,27,2,6,27,31,2,13,31,35,1,9,35,39,2,10,39,43,1,6,43,47,1,13,47,51,2,6,51,55,2,55,6,59,1,59,5,63,2,9,63,67,1,5,67,71,2,10,71,75,1,6,75,79,1,79,5,83,2,83,10,87,1,9,87,91,1,5,91,95,1,95,6,99,2,10,99,103,1,5,103,107,1,107,6,111,1,5,111,115,2,115,6,119,1,119,6,123,1,123,10,127,1,127,13,131,1,131,2,135,1,135,5,0,99,2,14,0,0

// brute force approach 
/*
for each of the position in (1), loop over 0 to 99 positions for (2)

19690720

196907*100 + 20
19690*100 + 720
1969*100 + 19493820
196*100 + 19671120

*/

getProgramState();
function getProgramState() {
    // const input = util.readFile('day2.txt');
    const input = ["3,225,1,225,6,6,1100,1,238,225,104,0,1101,37,61,225,101,34,121,224,1001,224,-49,224,4,224,102,8,223,223,1001,224,6,224,1,224,223,223,1101,67,29,225,1,14,65,224,101,-124,224,224,4,224,1002,223,8,223,101,5,224,224,1,224,223,223,1102,63,20,225,1102,27,15,225,1102,18,79,224,101,-1422,224,224,4,224,102,8,223,223,1001,224,1,224,1,223,224,223,1102,20,44,225,1001,69,5,224,101,-32,224,224,4,224,1002,223,8,223,101,1,224,224,1,223,224,223,1102,15,10,225,1101,6,70,225,102,86,40,224,101,-2494,224,224,4,224,1002,223,8,223,101,6,224,224,1,223,224,223,1102,25,15,225,1101,40,67,224,1001,224,-107,224,4,224,102,8,223,223,101,1,224,224,1,223,224,223,2,126,95,224,101,-1400,224,224,4,224,1002,223,8,223,1001,224,3,224,1,223,224,223,1002,151,84,224,101,-2100,224,224,4,224,102,8,223,223,101,6,224,224,1,224,223,223,4,223,99,0,0,0,677,0,0,0,0,0,0,0,0,0,0,0,1105,0,99999,1105,227,247,1105,1,99999,1005,227,99999,1005,0,256,1105,1,99999,1106,227,99999,1106,0,265,1105,1,99999,1006,0,99999,1006,227,274,1105,1,99999,1105,1,280,1105,1,99999,1,225,225,225,1101,294,0,0,105,1,0,1105,1,99999,1106,0,300,1105,1,99999,1,225,225,225,1101,314,0,0,106,0,0,1105,1,99999,108,677,677,224,1002,223,2,223,1006,224,329,101,1,223,223,1107,677,226,224,102,2,223,223,1006,224,344,101,1,223,223,8,677,677,224,1002,223,2,223,1006,224,359,101,1,223,223,1008,677,677,224,1002,223,2,223,1006,224,374,101,1,223,223,7,226,677,224,1002,223,2,223,1006,224,389,1001,223,1,223,1007,677,677,224,1002,223,2,223,1006,224,404,1001,223,1,223,7,677,677,224,1002,223,2,223,1006,224,419,1001,223,1,223,1008,677,226,224,1002,223,2,223,1005,224,434,1001,223,1,223,1107,226,677,224,102,2,223,223,1005,224,449,1001,223,1,223,1008,226,226,224,1002,223,2,223,1006,224,464,1001,223,1,223,1108,677,677,224,102,2,223,223,1006,224,479,101,1,223,223,1108,226,677,224,1002,223,2,223,1006,224,494,1001,223,1,223,107,226,226,224,1002,223,2,223,1006,224,509,1001,223,1,223,8,226,677,224,102,2,223,223,1006,224,524,1001,223,1,223,1007,226,226,224,1002,223,2,223,1006,224,539,1001,223,1,223,107,677,677,224,1002,223,2,223,1006,224,554,1001,223,1,223,1107,226,226,224,102,2,223,223,1005,224,569,101,1,223,223,1108,677,226,224,1002,223,2,223,1006,224,584,1001,223,1,223,1007,677,226,224,1002,223,2,223,1005,224,599,101,1,223,223,107,226,677,224,102,2,223,223,1005,224,614,1001,223,1,223,108,226,226,224,1002,223,2,223,1005,224,629,101,1,223,223,7,677,226,224,102,2,223,223,1005,224,644,101,1,223,223,8,677,226,224,102,2,223,223,1006,224,659,1001,223,1,223,108,677,226,224,102,2,223,223,1005,224,674,1001,223,1,223,4,223,99,226"];
    // let input_array = input[0].split(",");
    input_array = [1102, 34463338, 34463338, 63, 1007, 63, 34463338, 63, 1005, 63, 53, 1101, 0, 3, 1000, 109, 988, 209, 12, 9, 1000, 209, 6, 209, 3, 203, 0, 1008, 1000, 1, 63, 1005, 63, 65, 1008, 1000, 2, 63, 1005, 63, 904, 1008, 1000, 0, 63, 1005, 63, 58, 4, 25, 104, 0, 99, 4, 0, 104, 0, 99, 4, 17, 104, 0, 99, 0, 0, 1102, 1, 432, 1027, 1101, 439, 0, 1026, 1101, 0, 36, 1010, 1101, 0, 34, 1018, 1102, 278, 1, 1029, 1101, 0, 24, 1002, 1102, 1, 20, 1016, 1102, 1, 31, 1011, 1102, 319, 1, 1024, 1102, 21, 1, 1012, 1102, 1, 763, 1022, 1102, 1, 25, 1007, 1101, 0, 287, 1028, 1102, 32, 1, 1008, 1101, 0, 22, 1013, 1102, 38, 1, 1001, 1101, 0, 314, 1025, 1102, 35, 1, 1009, 1102, 1, 23, 1015, 1102, 39, 1, 1019, 1102, 27, 1, 1000, 1102, 1, 37, 1003, 1102, 1, 28, 1017, 1101, 0, 0, 1020, 1101, 0, 29, 1004, 1102, 1, 30, 1006, 1102, 1, 756, 1023, 1102, 1, 33, 1005, 1101, 0, 1, 1021, 1102, 26, 1, 1014, 109, 13, 2108, 28, -7, 63, 1005, 63, 201, 1001, 64, 1, 64, 1105, 1, 203, 4, 187, 1002, 64, 2, 64, 109, 8, 21107, 40, 41, -3, 1005, 1018, 225, 4, 209, 1001, 64, 1, 64, 1105, 1, 225, 1002, 64, 2, 64, 109, -3, 1206, 2, 239, 4, 231, 1105, 1, 243, 1001, 64, 1, 64, 1002, 64, 2, 64, 109, -21, 1201, 6, 0, 63, 1008, 63, 35, 63, 1005, 63, 267, 1001, 64, 1, 64, 1105, 1, 269, 4, 249, 1002, 64, 2, 64, 109, 35, 2106, 0, -4, 4, 275, 1001, 64, 1, 64, 1105, 1, 287, 1002, 64, 2, 64, 109, -11, 1205, -1, 303, 1001, 64, 1, 64, 1105, 1, 305, 4, 293, 1002, 64, 2, 64, 109, 8, 2105, 1, -5, 4, 311, 1106, 0, 323, 1001, 64, 1, 64, 1002, 64, 2, 64, 109, -7, 21108, 41, 38, -6, 1005, 1016, 339, 1106, 0, 345, 4, 329, 1001, 64, 1, 64, 1002, 64, 2, 64, 109, 2, 21102, 42, 1, -8, 1008, 1016, 45, 63, 1005, 63, 369, 1001, 64, 1, 64, 1105, 1, 371, 4, 351, 1002, 64, 2, 64, 109, -14, 21101, 43, 0, 1, 1008, 1011, 43, 63, 1005, 63, 397, 4, 377, 1001, 64, 1, 64, 1106, 0, 397, 1002, 64, 2, 64, 109, -8, 21101, 44, 0, 8, 1008, 1010, 47, 63, 1005, 63, 417, 1105, 1, 423, 4, 403, 1001, 64, 1, 64, 1002, 64, 2, 64, 109, 25, 2106, 0, 0, 1001, 64, 1, 64, 1105, 1, 441, 4, 429, 1002, 64, 2, 64, 109, -20, 2107, 37, -6, 63, 1005, 63, 463, 4, 447, 1001, 64, 1, 64, 1106, 0, 463, 1002, 64, 2, 64, 109, 8, 2108, 25, -8, 63, 1005, 63, 485, 4, 469, 1001, 64, 1, 64, 1106, 0, 485, 1002, 64, 2, 64, 109, -1, 21107, 45, 44, -1, 1005, 1013, 505, 1001, 64, 1, 64, 1106, 0, 507, 4, 491, 1002, 64, 2, 64, 109, -11, 1207, -1, 25, 63, 1005, 63, 529, 4, 513, 1001, 64, 1, 64, 1106, 0, 529, 1002, 64, 2, 64, 109, 23, 1206, -5, 545, 1001, 64, 1, 64, 1106, 0, 547, 4, 535, 1002, 64, 2, 64, 109, -31, 2102, 1, 5, 63, 1008, 63, 27, 63, 1005, 63, 569, 4, 553, 1106, 0, 573, 1001, 64, 1, 64, 1002, 64, 2, 64, 109, 27, 21102, 46, 1, -9, 1008, 1013, 46, 63, 1005, 63, 595, 4, 579, 1105, 1, 599, 1001, 64, 1, 64, 1002, 64, 2, 64, 109, -26, 2101, 0, 6, 63, 1008, 63, 24, 63, 1005, 63, 625, 4, 605, 1001, 64, 1, 64, 1106, 0, 625, 1002, 64, 2, 64, 109, 5, 1208, 0, 37, 63, 1005, 63, 645, 1001, 64, 1, 64, 1105, 1, 647, 4, 631, 1002, 64, 2, 64, 109, 7, 2102, 1, -3, 63, 1008, 63, 31, 63, 1005, 63, 671, 1001, 64, 1, 64, 1105, 1, 673, 4, 653, 1002, 64, 2, 64, 109, 2, 1202, -5, 1, 63, 1008, 63, 33, 63, 1005, 63, 699, 4, 679, 1001, 64, 1, 64, 1105, 1, 699, 1002, 64, 2, 64, 109, -4, 2101, 0, -3, 63, 1008, 63, 35, 63, 1005, 63, 719, 1105, 1, 725, 4, 705, 1001, 64, 1, 64, 1002, 64, 2, 64, 109, -5, 1207, 4, 32, 63, 1005, 63, 741, 1106, 0, 747, 4, 731, 1001, 64, 1, 64, 1002, 64, 2, 64, 109, 29, 2105, 1, -7, 1001, 64, 1, 64, 1106, 0, 765, 4, 753, 1002, 64, 2, 64, 109, -26, 2107, 36, 5, 63, 1005, 63, 781, 1105, 1, 787, 4, 771, 1001, 64, 1, 64, 1002, 64, 2, 64, 109, 10, 1201, -6, 0, 63, 1008, 63, 32, 63, 1005, 63, 809, 4, 793, 1106, 0, 813, 1001, 64, 1, 64, 1002, 64, 2, 64, 109, 3, 21108, 47, 47, -5, 1005, 1012, 835, 4, 819, 1001, 64, 1, 64, 1106, 0, 835, 1002, 64, 2, 64, 109, -24, 1202, 9, 1, 63, 1008, 63, 25, 63, 1005, 63, 859, 1001, 64, 1, 64, 1106, 0, 861, 4, 841, 1002, 64, 2, 64, 109, 19, 1205, 9, 875, 4, 867, 1106, 0, 879, 1001, 64, 1, 64, 1002, 64, 2, 64, 109, -3, 1208, -1, 32, 63, 1005, 63, 897, 4, 885, 1106, 0, 901, 1001, 64, 1, 64, 4, 64, 99, 21102, 27, 1, 1, 21101, 915, 0, 0, 1105, 1, 922, 21201, 1, 60043, 1, 204, 1, 99, 109, 3, 1207, -2, 3, 63, 1005, 63, 964, 21201, -2, -1, 1, 21102, 1, 942, 0, 1106, 0, 922, 21202, 1, 1, -1, 21201, -2, -3, 1, 21101, 957, 0, 0, 1106, 0, 922, 22201, 1, -1, -2, 1105, 1, 968, 22102, 1, -2, -2, 109, -3, 2105, 1, 0]
    // input_array = [104, 1125899906842624, 99];
    input_array = input_array.map((x) => {
        return parseInt(x, 10);
    });

    input_array = computeResult(input_array, 2);

    console.log(JSON.stringify(input_array));
    return input_array[0];
}

function get_pos_by_parameter_mode(i, increment, offset, parameter_mode) {
    switch (parameter_mode) {
        case 0:
            return input_array[i + increment]
        case 1:
            return i + increment;
        case 2:
            return offset + input_array[i + increment]
        default:
            break;
    }
}

function computeResult(input_array, specialInput) {
    let first_param_value, second_param_value;
    let relative_offset = 0;
    for (let i = 0; i < input_array.length;) {
        // get the first string
        let num = input_array[i];
        const first_operation = num % 100;
        num = Math.floor(num / 100);
        const first_parameter_mode = num === 0 ? 0 : num % 10;
        num = Math.floor(num / 10);
        const second_parameter_mode = num === 0 ? 0 : num % 10;
        num = Math.floor(num / 10);
        const third_paramter_mode = num === 0 ? 0 : num % 10;
        let operation = first_operation;
        first_param_value = input_array[get_pos_by_parameter_mode(i, 1, relative_offset, first_parameter_mode)];
        second_param_value = input_array[get_pos_by_parameter_mode(i, 2, relative_offset, second_parameter_mode)];
        let third_param_value = get_pos_by_parameter_mode(i, 3, relative_offset, third_paramter_mode);
        switch (operation) {
            case 1:
                input_array[third_param_value] = first_param_value + second_param_value;
                i = i + 4;
                break;
            case 2:
                input_array[third_param_value] = first_param_value * second_param_value;
                i = i + 4
                break;
            case 3:
                // input
                let input_mode = get_pos_by_parameter_mode(i, 1, relative_offset, first_parameter_mode);
                input_array[input_mode] = specialInput;
                i = i + 2;
                break;
            case 4:
                // output
                console.log(first_param_value);
                i = i + 2;
                break;
            case 5:
                if (first_param_value !== 0) {
                    i = second_param_value;
                } else {
                    i = i + 3;
                }
                break;
            case 6:
                if (first_param_value === 0) {
                    i = second_param_value;
                } else {
                    i = i + 3;
                }
                break;
            case 7:
                if (first_param_value < second_param_value) {
                    input_array[third_param_value] = 1;
                } else {
                    input_array[third_param_value] = 0;
                }
                i = i + 4;
                break;
            case 8:
                if (first_param_value === second_param_value) {
                    input_array[third_param_value] = 1;
                } else {
                    input_array[third_param_value] = 0;
                }
                i = i + 4;
                break;
            case 9:
                relative_offset = relative_offset + first_param_value;
                i = i + 2;
                break;
            case 99:
                i = i + 1;
                throw new Error('halt');
                break;
            default:
                throw new Error('invalid operation');
                break;

        }
    }
    return input_array;
}

module.exports = { get1202ProgramState }